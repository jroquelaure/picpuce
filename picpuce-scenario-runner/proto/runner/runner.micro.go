// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/runner/runner.proto

/*
Package runner is a generated protocol buffer package.

It is generated from these files:
	proto/runner/runner.proto

It has these top-level messages:
	Scenario
	Chunk
	Response
*/
package runner

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Runner service

type RunnerService interface {
	RunScenario(ctx context.Context, in *Scenario, opts ...client.CallOption) (*Response, error)
	AddChunk(ctx context.Context, opts ...client.CallOption) (Runner_AddChunkService, error)
}

type runnerService struct {
	c    client.Client
	name string
}

func NewRunnerService(name string, c client.Client) RunnerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "runner"
	}
	return &runnerService{
		c:    c,
		name: name,
	}
}

func (c *runnerService) RunScenario(ctx context.Context, in *Scenario, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Runner.RunScenario", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerService) AddChunk(ctx context.Context, opts ...client.CallOption) (Runner_AddChunkService, error) {
	req := c.c.NewRequest(c.name, "Runner.AddChunk", &Chunk{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &runnerServiceAddChunk{stream}, nil
}

type Runner_AddChunkService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Chunk) error
}

type runnerServiceAddChunk struct {
	stream client.Stream
}

func (x *runnerServiceAddChunk) Close() error {
	return x.stream.Close()
}

func (x *runnerServiceAddChunk) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *runnerServiceAddChunk) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *runnerServiceAddChunk) Send(m *Chunk) error {
	return x.stream.Send(m)
}

// Server API for Runner service

type RunnerHandler interface {
	RunScenario(context.Context, *Scenario, *Response) error
	AddChunk(context.Context, Runner_AddChunkStream) error
}

func RegisterRunnerHandler(s server.Server, hdlr RunnerHandler, opts ...server.HandlerOption) error {
	type runner interface {
		RunScenario(ctx context.Context, in *Scenario, out *Response) error
		AddChunk(ctx context.Context, stream server.Stream) error
	}
	type Runner struct {
		runner
	}
	h := &runnerHandler{hdlr}
	return s.Handle(s.NewHandler(&Runner{h}, opts...))
}

type runnerHandler struct {
	RunnerHandler
}

func (h *runnerHandler) RunScenario(ctx context.Context, in *Scenario, out *Response) error {
	return h.RunnerHandler.RunScenario(ctx, in, out)
}

func (h *runnerHandler) AddChunk(ctx context.Context, stream server.Stream) error {
	return h.RunnerHandler.AddChunk(ctx, &runnerAddChunkStream{stream})
}

type Runner_AddChunkStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Chunk, error)
}

type runnerAddChunkStream struct {
	stream server.Stream
}

func (x *runnerAddChunkStream) Close() error {
	return x.stream.Close()
}

func (x *runnerAddChunkStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *runnerAddChunkStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *runnerAddChunkStream) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
