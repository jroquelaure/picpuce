// Code generated by MockGen. DO NOT EDIT.
// Source: picpuce-scenario-runner/proto/runner/runner.micro.go

// Package mock_runner is a generated GoMock package.
package mock_runner

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	runner "github.com/jroquelaure/picpuce/picpuce-scenario-runner/proto/runner"
	client "github.com/micro/go-micro/client"
	reflect "reflect"
)

// MockRunnerService is a mock of RunnerService interface
type MockRunnerService struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerServiceMockRecorder
}

// MockRunnerServiceMockRecorder is the mock recorder for MockRunnerService
type MockRunnerServiceMockRecorder struct {
	mock *MockRunnerService
}

// NewMockRunnerService creates a new mock instance
func NewMockRunnerService(ctrl *gomock.Controller) *MockRunnerService {
	mock := &MockRunnerService{ctrl: ctrl}
	mock.recorder = &MockRunnerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunnerService) EXPECT() *MockRunnerServiceMockRecorder {
	return m.recorder
}

// RunScenario mocks base method
func (m *MockRunnerService) RunScenario(ctx context.Context, in *runner.Scenario, opts ...client.CallOption) (*runner.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunScenario", varargs...)
	ret0, _ := ret[0].(*runner.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunScenario indicates an expected call of RunScenario
func (mr *MockRunnerServiceMockRecorder) RunScenario(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunScenario", reflect.TypeOf((*MockRunnerService)(nil).RunScenario), varargs...)
}

// AddChunk mocks base method
func (m *MockRunnerService) AddChunk(ctx context.Context, opts ...client.CallOption) (runner.Runner_AddChunkService, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddChunk", varargs...)
	ret0, _ := ret[0].(runner.Runner_AddChunkService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChunk indicates an expected call of AddChunk
func (mr *MockRunnerServiceMockRecorder) AddChunk(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChunk", reflect.TypeOf((*MockRunnerService)(nil).AddChunk), varargs...)
}

// MockRunner_AddChunkService is a mock of Runner_AddChunkService interface
type MockRunner_AddChunkService struct {
	ctrl     *gomock.Controller
	recorder *MockRunner_AddChunkServiceMockRecorder
}

// MockRunner_AddChunkServiceMockRecorder is the mock recorder for MockRunner_AddChunkService
type MockRunner_AddChunkServiceMockRecorder struct {
	mock *MockRunner_AddChunkService
}

// NewMockRunner_AddChunkService creates a new mock instance
func NewMockRunner_AddChunkService(ctrl *gomock.Controller) *MockRunner_AddChunkService {
	mock := &MockRunner_AddChunkService{ctrl: ctrl}
	mock.recorder = &MockRunner_AddChunkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunner_AddChunkService) EXPECT() *MockRunner_AddChunkServiceMockRecorder {
	return m.recorder
}

// SendMsg mocks base method
func (m *MockRunner_AddChunkService) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockRunner_AddChunkServiceMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRunner_AddChunkService)(nil).SendMsg), arg0)
}

// RecvMsg mocks base method
func (m *MockRunner_AddChunkService) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockRunner_AddChunkServiceMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRunner_AddChunkService)(nil).RecvMsg), arg0)
}

// Close mocks base method
func (m *MockRunner_AddChunkService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRunner_AddChunkServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRunner_AddChunkService)(nil).Close))
}

// Send mocks base method
func (m *MockRunner_AddChunkService) Send(arg0 *runner.Chunk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockRunner_AddChunkServiceMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRunner_AddChunkService)(nil).Send), arg0)
}

// MockRunnerHandler is a mock of RunnerHandler interface
type MockRunnerHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerHandlerMockRecorder
}

// MockRunnerHandlerMockRecorder is the mock recorder for MockRunnerHandler
type MockRunnerHandlerMockRecorder struct {
	mock *MockRunnerHandler
}

// NewMockRunnerHandler creates a new mock instance
func NewMockRunnerHandler(ctrl *gomock.Controller) *MockRunnerHandler {
	mock := &MockRunnerHandler{ctrl: ctrl}
	mock.recorder = &MockRunnerHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunnerHandler) EXPECT() *MockRunnerHandlerMockRecorder {
	return m.recorder
}

// RunScenario mocks base method
func (m *MockRunnerHandler) RunScenario(arg0 context.Context, arg1 *runner.Scenario, arg2 *runner.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunScenario", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunScenario indicates an expected call of RunScenario
func (mr *MockRunnerHandlerMockRecorder) RunScenario(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunScenario", reflect.TypeOf((*MockRunnerHandler)(nil).RunScenario), arg0, arg1, arg2)
}

// AddChunk mocks base method
func (m *MockRunnerHandler) AddChunk(arg0 context.Context, arg1 runner.Runner_AddChunkStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChunk", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddChunk indicates an expected call of AddChunk
func (mr *MockRunnerHandlerMockRecorder) AddChunk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChunk", reflect.TypeOf((*MockRunnerHandler)(nil).AddChunk), arg0, arg1)
}

// MockRunner_AddChunkStream is a mock of Runner_AddChunkStream interface
type MockRunner_AddChunkStream struct {
	ctrl     *gomock.Controller
	recorder *MockRunner_AddChunkStreamMockRecorder
}

// MockRunner_AddChunkStreamMockRecorder is the mock recorder for MockRunner_AddChunkStream
type MockRunner_AddChunkStreamMockRecorder struct {
	mock *MockRunner_AddChunkStream
}

// NewMockRunner_AddChunkStream creates a new mock instance
func NewMockRunner_AddChunkStream(ctrl *gomock.Controller) *MockRunner_AddChunkStream {
	mock := &MockRunner_AddChunkStream{ctrl: ctrl}
	mock.recorder = &MockRunner_AddChunkStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunner_AddChunkStream) EXPECT() *MockRunner_AddChunkStreamMockRecorder {
	return m.recorder
}

// SendMsg mocks base method
func (m *MockRunner_AddChunkStream) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockRunner_AddChunkStreamMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRunner_AddChunkStream)(nil).SendMsg), arg0)
}

// RecvMsg mocks base method
func (m *MockRunner_AddChunkStream) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockRunner_AddChunkStreamMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRunner_AddChunkStream)(nil).RecvMsg), arg0)
}

// Close mocks base method
func (m *MockRunner_AddChunkStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRunner_AddChunkStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRunner_AddChunkStream)(nil).Close))
}

// Recv mocks base method
func (m *MockRunner_AddChunkStream) Recv() (*runner.Chunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*runner.Chunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockRunner_AddChunkStreamMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRunner_AddChunkStream)(nil).Recv))
}
