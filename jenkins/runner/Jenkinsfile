node() {
     def root = tool name: 'go_tool', type: 'go'
    def tagName="$params.dockerRepo/picpuce-scenario-runner:${env.BUILD_NUMBER}"
    def buildInfo = Artifactory.newBuildInfo() 
    // Export environment variables pointing to the directory where Go was installed
   
    def server = Artifactory.server('europeMain')
    def server_url = server.url
    
    stage('Get sources') {
        git url: 'https://github.com/jroquelaure/picpuce.git'
    }
    stage ('Build') {
         sh "curl -fL https://getcli.jfrog.io | sh"
        sh "chmod +x jfrog"
        dir('picpuce-scenario-runner'){
          
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'jenkins-ci',
            usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                sh "../jfrog rt c main --user ${USERNAME} --password ${PASSWORD} --url ${server_url} < /dev/null"
            }
             withEnv(["GOROOT=${root}", "PATH+GO=${root}/bin"]) {
                sh "../jfrog rt go build picpuce-go-virtual --build-name=${env.JOB_NAME} --build-number=${env.BUILD_NUMBER}}"
            }
        }
    }
    stage ('Publish') {
        dir('picpuce-scenario-runner'){
            withEnv(["GOROOT=${root}", "PATH+GO=${root}/bin"]) {
                sh "../jfrog rt gp picpuce-go-virtual 1.0 --build-name=${env.JOB_NAME} --build-number=${env.BUILD_NUMBER}"
            }
            sh "../jfrog rt bce ${env.JOB_NAME} ${env.BUILD_NUMBER}" 
            sh "../jfrog rt bp ${env.JOB_NAME} ${env.BUILD_NUMBER} -server-id main"
        }
    }
    stage ('Test') {
        
    }
    stage ('Promote') {
def promotionConfig = [
            // Mandatory parameters
            'buildName'          : env.JOB_NAME,
            'buildNumber'        : env.BUILD_NUMBER,
            'targetRepo'         : 'picpuce-go-release-local',
    
            // Optional parameters
            'comment'            : 'ready for prod',
            'sourceRepo'         : 'picpuce-go-dev-local',
            'status'             : 'Released',
            'includeDependencies': false,
            'copy'               : false
        ]

        // Promote build
        server.promote promotionConfig   
    }
    stage ('Build Image') {
        
        
         buildInfo.env.collect()
        sh """sed -ie 's/ubuntu:5001/$params.dockerRepo/g' Docker/runner/Dockerfile"""
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'jenkins-ci',
            usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                sh "docker login -u ${USERNAME} -p ${PASSWORD} " + params.dockerRepo
            }
        sh 'cat Docker/runner/Dockerfile'
        docker.build(tagName, "-f Docker/runner/Dockerfile .") 
    }
    stage ("Push built image") {
        def artDocker= Artifactory.docker server: server   
                artDocker.push(tagName, 'docker-dev-local',buildInfo)
                server.publishBuildInfo(buildInfo)
                
                //sh("""curl -H 'X-JFrog-Art-Api:$password' -X DELETE $server.url/docker-dev-local/docker-framework/latest """)
 withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'jenkins-ci',
            usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                sh("""curl -H 'X-JFrog-Art-Api:${PASSWORD}'  $server.url/api/docker/docker-dev-local/v2/promote -H "Content-Type:application/json" -d '{"targetRepo" : "docker-dev-local", "dockerRepository" : "picpuce-scenario-runner", "tag" : "${env.BUILD_NUMBER}", "targetTag" : "latest", "copy": true }' """)
            }
}

}